// Generated by CoffeeScript 1.3.3
(function() {
  var Application, human, now, parseSrt, parseSrt_typeA, parseSrt_typeB;

  parseSrt = function(txt) {
    if (txt.search(/\d+:\d+:\d+([.,]\d+)? -->/) !== -1) {
      console.log("type A");
      return parseSrt_typeA(txt);
    }
    if (txt.search(/^\{\d+\}\{\d+\}/) !== -1) {
      console.log("type B");
      return parseSrt_typeB(txt);
    }
    return console.error("could not recognise srt format");
  };

  parseSrt_typeB = function(txt) {
    var events, fps, line, lines, xs, _i, _len;
    lines = txt.replace('\r', '').split('\n');
    console.log("" + lines.length + " lines");
    fps = 25.0;
    events = [];
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      xs = line.trim().match(/^\{(\d+)\}\{(\d+)\}(.*)$/);
      if (!xs) {
        console.log("unrecognised: " + line);
        continue;
      }
      events.push({
        ts: parseFloat(xs[1]) / fps,
        text: xs[3]
      });
    }
    return {
      events: events,
      duration: events[events.length - 1].ts - events[0].ts
    };
  };

  parseSrt_typeA = function(txt) {
    var content, endTs, events, line, lines, startTs, xs, _i, _len;
    lines = txt.replace('\r', '').split('\n');
    console.log("" + lines.length + " lines");
    events = [];
    startTs = 0;
    endTs = 0;
    content = '';
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      xs = line.replace(',', '.').match(/(\d+):(\d+):([\d.]+) --> (\d+):(\d+):([\d.]+)/);
      if (line.trim().match(/^\d+$/)) {
        if (content !== '') {
          events.push({
            ts: startTs,
            text: content
          });
          content = '';
        }
      } else if (xs) {
        startTs = parseInt(xs[1]) * 3600 + parseInt(xs[2]) * 60 + parseFloat(xs[3]);
        endTs = parseInt(xs[4]) * 3600 + parseInt(xs[5]) * 60 + parseFloat(xs[6]);
      } else {
        content = content + ' ' + line;
      }
    }
    events.push({
      ts: startTs,
      text: content
    });
    return {
      events: events,
      duration: events[events.length - 1].ts - events[0].ts
    };
  };

  now = function() {
    var d;
    d = new Date();
    return d.getTime() / 1000.0;
  };

  human = function(s) {
    var min, sec;
    min = Math.floor(s / 60);
    sec = Math.round(s - 60 * min);
    if (min < 10) {
      min = "0" + min;
    }
    if (sec < 10) {
      sec = "0" + sec;
    }
    return "" + min + ":" + sec;
  };

  Application = (function() {

    Application.prototype.tick = function() {
      var curTs, nextDelay,
        _this = this;
      curTs = now() - this.startTs;
      console.log("tick: " + curTs);
      while (curTs - this.srt.events[this.pos].ts > -0.2) {
        $('#content').text(this.srt.events[this.pos].text);
        this.pos++;
      }
      $('#picker').val(this.pos - 1);
      nextDelay = this.srt.events[this.pos].ts - curTs;
      console.log("nextDelay = " + nextDelay);
      return this.clockHandle = window.setTimeout((function() {
        return _this.tick();
      }), Math.floor(1000 * nextDelay));
    };

    Application.prototype.reset = function() {
      console.log('reset');
      return this.pos = 0;
    };

    Application.prototype.transform = function(a, b) {
      var e;
      return this.srt = {
        events: (function() {
          var _i, _len, _ref, _results;
          _ref = this.rawSrt.events;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push({
              ts: a * e.ts + b,
              text: e.text
            });
          }
          return _results;
        }).call(this),
        duration: a * this.rawSrt.duration,
        a: a,
        b: b
      };
    };

    Application.prototype.fillPicker = function() {
      var e, i, picker, _i, _len, _ref, _results;
      picker = $('#picker');
      picker.empty();
      _ref = this.srt.events;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        _results.push(picker.append($('<option>').attr('value', i).text("" + (human(e.ts)) + ": " + e.text)));
      }
      return _results;
    };

    Application.prototype.load = function() {
      var fname,
        _this = this;
      this.stop();
      fname = 'srt/' + $('#fname').val();
      return $.get(fname, function(data, xhr) {
        _this.rawSrt = parseSrt(data);
        _this.transform(1.0, 0.0);
        _this.fillPicker();
        console.log(_this.srt.events);
        return console.log("duration: " + (human(_this.srt.duration)));
      });
    };

    Application.prototype.play = function() {
      console.log('play');
      if (this.state === 'stopped') {
        this.startTs = now();
      }
      if (this.state === 'paused') {
        this.startTs += now() - this.pauseTs;
      }
      this.state = 'playing';
      return this.tick();
    };

    Application.prototype.pause = function() {
      console.log('pause');
      this.state = 'paused';
      this.pauseTs = now();
      return window.clearTimeout(this.clockHandle);
    };

    Application.prototype.stop = function() {
      console.log('stop');
      this.pause();
      this.reset();
      return this.state = 'stopped';
    };

    Application.prototype.next = function() {
      console.log("next");
      this.pause();
      this.pauseTs = this.startTs + this.srt.events[this.pos].ts;
      $('#content').text(this.srt.events[this.pos].text);
      return this.pos++;
    };

    Application.prototype.skip = function(k) {
      var dt;
      console.log("skip " + k);
      console.log("startTs_1 = " + this.startTs);
      this.pause();
      this.startTs += k * parseFloat($('#skip-val').val());
      console.log("startTs_2 = " + this.startTs);
      dt = now() - this.startTs;
      while ((this.pos > 0) && (this.srt.events[this.pos - 1].ts > dt)) {
        this.pos -= 1;
      }
      this.play();
      return console.log("startTs_3 = " + this.startTs);
    };

    Application.prototype.speedup = function() {
      var dt, k;
      this.pause();
      k = 1.0 / parseFloat($('#speedup-val').val());
      console.log("speedup " + k);
      dt = now() - this.startTs;
      this.transform(k, 0.0);
      this.startTs = now() - k * dt;
      return this.play();
    };

    Application.prototype.showPicker = function() {
      if ($('#show-picker').prop('checked')) {
        return $('#picker-wrap').show();
      } else {
        return $('#picker-wrap').hide();
      }
    };

    Application.prototype.pickerClick = function() {
      this.pos = $('#picker').val();
      return this.next();
    };

    function Application() {
      var fname, _i, _len, _ref,
        _this = this;
      this.rawSrt = null;
      this.srt = null;
      this.startTs = null;
      this.clockHandle = null;
      this.pauseTs = null;
      this.state = 'stopped';
      _ref = window.SRTS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fname = _ref[_i];
        $('#fname').append($('<option>').attr('value', fname).text(fname));
      }
      $('#load').click(function() {
        return _this.load();
      });
      $('#play').click(function() {
        return _this.play();
      });
      $('#pause').click(function() {
        return _this.pause();
      });
      $('#stop').click(function() {
        return _this.stop();
      });
      $('#next').click(function() {
        return _this.next();
      });
      $('#skip-forward').click(function() {
        return _this.skip(1.0);
      });
      $('#skip-back').click(function() {
        return _this.skip(-1.0);
      });
      $('#speedup').click(function() {
        return _this.speedup();
      });
      $('#show-picker').click(function() {
        return _this.showPicker();
      });
      $('#picker').click(function() {
        return _this.pickerClick();
      });
    }

    return Application;

  })();

  $(function() {
    return new Application();
  });

}).call(this);
